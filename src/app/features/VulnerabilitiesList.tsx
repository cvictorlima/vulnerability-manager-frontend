import Icon from "@mdi/react";
import { mdiDesktopClassic, mdiNumeric1Circle, mdiNumeric2Circle, mdiNumeric3Circle, mdiNumeric4Circle, mdiNumeric5Circle, mdiNumeric6Circle } from '@mdi/js';
import { useEffect, useMemo, useState } from "react";
import { Column, useTable } from "react-table";
import styled from "styled-components";
import { Vulnerability } from "../../sdk/@types/Vulnerability";
import VulnerabilityService from "../../sdk/services/Vulnerability.service";
import Button from "../components/Button/Button";
import Table from "../components/Table/Table";
import { previousDay } from "date-fns";


export interface VulnerabilitiesListProps {
  token: string
}

export default function VulnerabilitiesList ({token}:VulnerabilitiesListProps) {
  const [vulnData, setVulnData] = useState<Vulnerability.Summary>()
  const [search, setSearch] = useState<Vulnerability.Query>({
    page: undefined,
    severity: undefined,
    ordering: undefined
})

  useEffect(() => {
    VulnerabilityService
      .getVulnerabilities(token, search)
      .then(setVulnData)
  },[token, search])

  function handleOrdering (order:string) {
    setSearch((prev)=> ({...prev, ordering: order}))
  }
  
  function handleReset () {
    setSearch({severity: undefined, page: 1, ordering: undefined })    
  }
  
  function handlePageChange (page:number) {
    setSearch((prev)=> ({...prev, page: page}))    
  }
  
  function onSeverityClick (severity:number) {
    setSearch((prev)=> ({...prev, severity: severity, page: 1}))    
  }

  const columns = useMemo<Column<Vulnerability.SummaryResult>[]>(
    () => [
      {
        Header: 'Id',
        accessor: 'id',
        Cell: (props) => <ListItem>{props.value}</ListItem>
      },
      {
        Header: 'Título',
        accessor: 'title',
        Cell: (props) => <p style={{paddingBottom: '5px'}} >{props.value}</p>
      },
      {
        Header: 'Severidade',
        accessor: 'severity',
        Cell: (props) => <ListItem>{props.value}</ListItem>
      },
      {
        Header: 'CVSS',
        accessor: 'cvss',
        Cell: (props) => <ListItem>{props.value}</ListItem>
      },
      {
        Header: 'Data de Publicação',
        accessor: 'publication_date',
        Cell: (props) => <ListItem>{props.value}</ListItem>
      },
      {
        Header: 'Nº de Hosts',
        accessor: 'asset_count',
        Cell: (props) => <ListItem>{props.value}</ListItem>
      },

    ],
    []
  )

  const instance = useTable<Vulnerability.SummaryResult>({data:vulnData?.results || [], columns})
  
  return<Wrapper>
    <Top>

      <Head>
        <PageTitle>Lista de Vulnerabilidades</PageTitle>
      </Head>
      <Controller>
      <Session>
      <Button 
      label='Reset'
      variant="primary"
      onClick = {handleReset}
      />
      </Session>
      <Session>
      <Description>Ascendente:</Description>
      <Button 
      label='Título'
      value= 'title'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
      />
      <Button 
      label='Severidade'
      value= 'severity'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
      />
      <Button 
      label='CVSS'
      value= 'cvss'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
      />
      <Button 
      label='Hosts'
      value= 'asset_count'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
      />
      </Session>
      <Session>
      <Description>Descendente:</Description>
      <Button 
      label='Título'
      value= '-title'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
      />
      <Button 
      label='Severidade'
      value= '-severity'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
      />
      <Button 
      label='CVSS'
      value= '-cvss'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
      />
      <Button 
      label='Hosts'
      value= '-asset_count'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
      />
      </Session>
      <Session>
      <Description>Por Severidade:</Description>
      <Button 
      label='Baixa'
      variant="primary"
      value={1}
      onClick = {(e) => {onSeverityClick(Number(e.currentTarget.value))}}
      />
      <Button 
      label='Média'
      variant="primary"
      value={2}
      onClick = {async (e) => {onSeverityClick(Number(e.currentTarget.value))}}
      />
      <Button 
      label='Alta'
      variant="primary"
      value={3}
      onClick = {(e) => {onSeverityClick(Number(e.currentTarget.value))}}
      />
      <CustomButton 
      value={4}
      onClick = {(e) => {onSeverityClick(Number(e.currentTarget.value))}}
      >Crítica</CustomButton>
      </Session>
      <PageSelector>
        <Page>
          <PageButton 
          value={1}
          onClick={(e)=> handlePageChange(Number(e.currentTarget.value))}>
            <Icon 
            size={1}
            color={'#274060'}
            path={mdiNumeric1Circle}
            />
          </PageButton>
        </Page>
        <Page>
          <PageButton 
          value={2}
          onClick={(e)=> handlePageChange(Number(e.currentTarget.value))}>
            <Icon 
            size={1}
            color={'#274060'}
            path={mdiNumeric2Circle}
            />
          </PageButton>
        </Page>
        <Page>
          <PageButton 
          value={3}
          onClick={(e)=> handlePageChange(Number(e.currentTarget.value))}>
            <Icon 
            size={1}
            color={'#274060'}
            path={mdiNumeric3Circle}
            />
          </PageButton>
        </Page>
        <Page>
          <PageButton 
          value={4}
          onClick={(e)=> handlePageChange(Number(e.currentTarget.value))}>
            <Icon 
            size={1}
            color={'#274060'}
            path={mdiNumeric4Circle}
            />
          </PageButton>
        </Page>
        <Page>
          <PageButton 
          value={5}
          onClick={(e)=> handlePageChange(Number(e.currentTarget.value))}>
            <Icon 
            size={1}
            color={'#274060'}
            path={mdiNumeric5Circle}
            />
          </PageButton>
        </Page>
        <Page>
          <PageButton 
          value={6}
          onClick={(e)=> handlePageChange(Number(e.currentTarget.value))}>
            <Icon 
            size={1}
            color={'#274060'}
            path={mdiNumeric6Circle}
            />
          </PageButton>
        </Page>
      </PageSelector>
      </Controller>
    </Top>
    <Table instance = {instance} />
  </Wrapper> 
}


const ListItem = styled.div`
display: flex;
flex-direction: column;
align-items: center;
`

const Controller = styled.div`
display: flex;
flex-direction: column;
gap: 12px;
background-color: white;
padding: 12px;
`

const Wrapper = styled.div`
display: flex;
flex-direction: column;
gap: 20px;
`
const Head = styled.div`
  display: flex;
  justify-content: space-between;
  align-items: center;
  padding-top: 20px;
  padding-bottom: 20px;
  padding-right: 40px;
  padding-left: 40px;
  background: rgb(2,0,36);
  background: linear-gradient(45deg, rgba(2,0,36,1) 0%, #1f0130 50%, #3b0242 100%);
`

const PageTitle = styled.h2`
  color: white;
`

const Top = styled.div`
`

const Description = styled.h4`
`

const Session = styled.div`
display: flex;
gap: 6px;
align-items: center;
`

const CustomButton = styled.button`

border: 0;
background-color: transparent;
font-family: 'Lato', sans-serif;
font-size: 1em;
font-weight: bold;
padding: 4px;
background-color: #ec2121;
opacity: 0.8;
:hover{
  opacity: 0.9;
  box-shadow: 2 2 blur;
  
}
`

const PageSelector = styled.ul`
display: flex;
`

const Page = styled.li`
list-style: none;
border: none;
`

const PageButton = styled.li`
border: none;
background-color: transparent;
padding-left: 4px;
padding-right: 4px;
padding-top: 4px;
:hover{
  background-color: #df5f35;
}
`




