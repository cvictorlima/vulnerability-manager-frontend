import styled from "styled-components"
import Button from "../components/Button/Button"


export interface OrderingButtonsProps {
  onSeverityClick: (severity: number) => any
  handleOrdering: (order: string) => any
  handleReset: () => any
}
//Botões para filtragem e ordenação da tabela de vulnerabilidades.
//As funções utilizadas na no click desses botões são passadas como props
export default function OrderingButtons ({onSeverityClick, handleOrdering, handleReset}:OrderingButtonsProps) {

  return <Wrapper>
    <ResetButton 
      label='<'
      variant="primary"
      onClick = {handleReset}
    />
    <CustomButton 
      value={1}
      onClick = {(e) => {onSeverityClick(Number(e.currentTarget.value))}}
    >Baixo</CustomButton>
    <CustomButton 
      value={2}
      onClick = {(e) => {onSeverityClick(Number(e.currentTarget.value))}}
    >Médio</CustomButton>
    <StyledButton 
      label='Título ↑'
      value= 'title'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
    />
    <StyledButton 
      label='Severidade ↑'
      value= 'severity'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
    />
    <StyledButton 
      label='CVSS ↑'
      value= 'cvss'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
    />
    <StyledButton 
      label='Hosts ↑'
      value= 'asset_count'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
    />
    <CustomButton 
      value={3}
      onClick = {(e) => {onSeverityClick(Number(e.currentTarget.value))}}
    >Alto</CustomButton>
    <CustomButton 
      value={4}
      onClick = {(e) => {onSeverityClick(Number(e.currentTarget.value))}}
    >Crítico</CustomButton>
    <StyledButton 
      label='Título ↓'
      value= '-title'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
    />
    <StyledButton 
      label='Severidade ↓'
      value= '-severity'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
    />
    <StyledButton 
      label='CVSS ↓'
      value= '-cvss'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
    />
    <StyledButton 
      label='Hosts ↓'
      value= '-asset_count'
      variant="primary"
      onClick = {(e) => {handleOrdering(e.currentTarget.value)}}
    />
  </Wrapper>
}


const Wrapper = styled.div`
display: grid;
grid-template-columns: 40px .5fr .5fr 1fr 1fr 1fr 1fr;
grid-template-rows: 1fr 1fr;
`

const CustomButton = styled.button`

border: 0;
font-family: 'Lato', sans-serif;
font-size: 10px;
font-weight: bold;
padding: 4px;
background-color: ${p => p.value === 1 ? 
'#70ff5de6' : p.value === 2 ? 
'#f5f821eb' : p.value === 3 ? 
'#ff961eeb' : '#ff3434'};
opacity: 0.8;
:hover{
  opacity: 0.9;
  box-shadow: 2 2 blur;
  background-color: ${p => p.value === 1 ? 
'#50c041e6' : p.value === 2 ? 
'#c7ca1eeb' : p.value === 3 ? 
'#dd8521eb' : '#d82121'};
  
}
`

const StyledButton = styled(Button)`
  color: black;
  font-weight: bold;
  font-size: 10px;
  padding: 2px;
  background-color: #9ec2eb;
  border: none;

  :hover{
    background-color: #8eadcf;
  }

`

const ResetButton = styled(Button)`
  font-weight: 500;
  height: 45px;
  grid-row-start: 1;
  grid-row-end: 3;
`

