import { useEffect, useMemo, useState } from "react";
import { Link } from "react-router-dom";
import { Column, useTable } from "react-table";
import styled from "styled-components";
import getFormatedDate from "../../core/utils/getFormatedDate";
import { Asset } from "../../sdk/@types/Asset";
import AssetService from "../../sdk/services/Asset.service";
import Table from "../components/Table/Table";


export interface HostsListProps {
  token: string
}

export default function HostsList ({token}:HostsListProps) {
  const [hostData, setHostData] = useState<Asset.Summary>()

  useEffect(() => {
    AssetService
      .getAllAssets(token)
      .then(response => {
        setHostData(response)
      })
  },[token])
  
  // const data = useMemo<Asset.SummaryResult[]>(()=> hostData!.results,[hostData])


  const columns = useMemo<Column<Asset.SummaryResult>[]>(
    () => [
      {
        id:'1',
        Header: 'Nome do Host',
        accessor: 'hostname',
        Cell: (props) => <CustomLink 
        to={`/host/${props.row.original.id}`}>{props.value}</CustomLink>
      },
      {
        id:'2',
        Header: 'Endereço de IP',
        accessor: 'ip_address',
        Cell: (props) => <p style={{ display:'flex', justifyContent:'center'}}>{props.value}</p>
      },
      {
        id:'3',
        Header: 'Data de Criação',
        accessor: 'created',
        Cell: (props) => <p>{getFormatedDate(props.value)}</p>
      },
      {
        id:'4',
        Header: 'Data de Modificação',
        accessor: 'modified',
        Cell: (props) => <p>{getFormatedDate(props.value)}</p>
      },
      {
        id:'5',
        Header: 'Risco',
        accessor: 'risk',
        Cell: (props) => <p style={{ display:'flex', justifyContent:'center'}}>{props.value}</p>
      },
      {
        id:'6',
        Header: 'Nº de Vuln',
        accessor: 'vuln_count',
        Cell: (props) => <p style={{ display:'flex', justifyContent:'center'}}>{props.value}</p>
      },

    ],
    []
  )

  const instance = useTable<Asset.SummaryResult>({data:hostData?.results || [], columns})
  
  return <Table instance = {instance} />
  // return <div>{token}</div>
}

const CustomLink = styled(Link)`
text-decoration: none;
cursor: pointer;
color: #D33400;
font-weight: bold;

:hover{
  color: #274060;
}
`