import { Vulnerability } from "../@types/Vulnerability";
import Service from "../Service";
import generateQueryString from "../utils/generateQueryString";


class VulnerabilityService extends Service {
  static getVulnerabilities (token: string, search: Vulnerability.Query) {
    const queryString = generateQueryString(search)
    return this.Http
    .get<Vulnerability.Summary>('/api/vulnerabilities'.concat(queryString), { headers: { Authorization: token }})
    .then(this.getData)
  }
  
    static getVulnerabilityByAsset (assetId: number, token: string) {
      return this.Http
        .get<Vulnerability.ByAsset>(`/api/vulnerabilities/?asset=${assetId}`, { headers: { Authorization: token }})
        .then(this.getData)
    }
  
    static getVulnerabilityBySeverity (severityLevel: number, token: string) {
      return this.Http
        .get<Vulnerability.BySeverity>(`/api/vulnerabilities/?severity=${severityLevel}`, 
          { headers: { Authorization: token }})
        .then(this.getData)
    }
    
    static getVulnerabilitiesOrdered (token: string) {
      return this.Http
        .get<Vulnerability.Ordered>(`/api/vulnerabilities/?ordering=-asset_count`, { headers: { Authorization: token }})
        .then(this.getData)
    }
  
  static getVulnerabilitiesByPage (token: string, page: number) {
    return this.Http
      .get<Vulnerability.Summary>(`/api/vulnerabilities/?page=${page}`, { headers: { Authorization: token }})
      .then(this.getData)
  }

  static changeVulnerabilityStatus (
    vulnerabilityID: number, assetId: number, vulnStatus: Vulnerability.StatusChange, token:string
  ) {
    return this.Http
      .patch<Vulnerability.StatusChange>(`/api/vulnerability/${vulnerabilityID}/asset/${assetId}/update`, vulnStatus, 
        { headers: { Authorization: token }})
      .then(this.getData)
  }
}

export default VulnerabilityService